import {
  HomePageData,
  HeroData,
  AboutData,
  ImageSlideData,
  StatsData,
  SolutionData,
  WorkflowData,
  ProjectDiaryData,
  TestimonialData,
  ConsultationFormData
} from '../types/homePageTypes';
import { fetchCategoryProjectForHomePage } from './projectCategoryService';
import { processProjectImageUrls } from './projectPageService';

// Import icons and diagrams (these would normally come from a CDN or be handled differently)
import { ReactComponent as BriefcaseIcon } from "../assets/icons/experience-icon.svg";
import { ReactComponent as HandshakeIcon } from "../assets/icons/customer-icon.svg";
import { ReactComponent as DesignIcon } from "../assets/icons/design-icon.svg";
import { ReactComponent as GearIcon } from "../assets/icons/building-icon.svg";
import { ReactComponent as DesignProcessIcon } from "../assets/icons/design-icon.svg";
import { ReactComponent as ConstructionProcessIcon } from "../assets/icons/building-icon.svg";
import { ReactComponent as WorkProcessFlowDiagram1 } from "../assets/icons/work-process-flow-diagram-1.svg";
import { ReactComponent as WorkProcessFlowDiagram2 } from "../assets/icons/work-process-flow-diagram-2.svg";

// Import images
import hero1 from "../assets/images/homepage/hero1.png";
import hero2 from "../assets/images/homepage/hero2.png";
import hero3 from "../assets/images/homepage/hero3.png";
import hero4 from "../assets/images/homepage/hero4.png";
import projectDiary1 from "../assets/images/homepage/projectdiary1.png";
import projectDiary2 from "../assets/images/homepage/projectdiary2.png";
import projectDiary3 from "../assets/images/homepage/projectdiary3.png";
import projectDiary4 from "../assets/images/homepage/projectdiary4.png";
import projectDiary5 from "../assets/images/homepage/projectdiary5.png";
import projectDiary6 from "../assets/images/homepage/projectdiary6.png";
import projectDiary7 from "../assets/images/homepage/projectdiary7.png";
import projectDiary8 from "../assets/images/homepage/projectdiary8.png";
import thumbIntro from "../assets/images/thumb-intro.png";
import thumbIntro1 from "../assets/images/diary-image-1.png";
import thumbIntro2 from "../assets/images/diary-image-2.png";
import thumbIntro3 from "../assets/images/diary-image-3.png";
import solutionImg1 from "../assets/images/homepage/solution1.png";
import solutionImg2 from "../assets/images/homepage/solution2.png";
import solutionImg3 from "../assets/images/homepage/solution3.png";
import solutionImg4 from "../assets/images/homepage/solution4.png";
import experienceImg from "../assets/images/diary-image-1.png";
import customerImg from "../assets/images/diary-image-2.png";
import projectImg from "../assets/images/diary-image-3.png";
import qualityImg from "../assets/images/diary-image-4.png";

// API Configuration
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3002/api/v1';

// Feature flag for mock data
const USE_MOCK_DATA = true;

// Cache for image slider data to prevent unnecessary API calls
let imageSliderCache: {
  data: ImageSlideData[] | null;
  timestamp: number;
  promise: Promise<ImageSlideData[]> | null;
} = {
  data: null,
  timestamp: 0,
  promise: null
};

// Cache duration: 5 minutes
const CACHE_DURATION = 5 * 60 * 1000;

// Error handling utility
const handleApiError = (error: any, section: string) => {
  console.error(`Error fetching ${section} data:`, error);
  throw new Error(`Failed to fetch ${section} data. Please try again later.`);
};

// API Functions for each section
export const fetchHeroData = async (): Promise<HeroData> => {
  try {
    if (USE_MOCK_DATA) {
      // Use mock data
      // await delay(500);
      return {
        images: [
          hero1,
          hero2,
          hero3,
          hero4
        ]
      };
    } else {
      // Make real API call
      const response = await fetch(`${API_BASE_URL}/homepage/hero`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(10000),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      return {
        images: data.data.images || []
      };
    }
  } catch (error) {
    handleApiError(error, 'hero');
    throw error;
  }
};

export const fetchAboutData = async (): Promise<AboutData> => {
  try {
    if (USE_MOCK_DATA) {
      // Use mock data
      // await delay(300);
      return {
        headline: "M·ªñI THI·∫æT K·∫æ L√Ä M·ªòT C√ÇU CHUY·ªÜN",
        subHeadline: "M·ªñI C√îNG TR√åNH L√Ä M·ªòT D·∫§U ·∫§N",
        description: "Th√†nh l·∫≠p t·ª´ nƒÉm 2022, PG l√† ƒë·ªôi ng≈© ki·∫øn tr√∫c s∆∞ tr·∫ª ƒë·∫ßy ƒëam m√™ v√† nhi·ªát huy·∫øt, ho·∫°t ƒë·ªông chuy√™n s√¢u trong lƒ©nh v·ª±c Ki·∫øn tr√∫c - X√¢y d·ª±ng - N·ªôi th·∫•t. Ch√∫ng t√¥i mang ƒë·∫øn gi·∫£i ph√°p to√†n di·ªán t·ª´ thi·∫øt k·∫ø √Ω t∆∞·ªüng ƒë·∫øn thi c√¥ng ho√†n thi·ªán, gi√∫p kh√°ch h√†ng t·ªëi ∆∞u kh√¥ng gian s·ªëng, ti·∫øt ki·ªám th·ªùi gian v√† chi ph√≠, nh∆∞ng v·∫´n ƒë·∫£m b·∫£o th·∫©m m·ªπ v√† c√¥ng nƒÉng."
      };
    } else {
      // Make real API call
      const response = await fetch(`${API_BASE_URL}/homepage/about`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(10000),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      return {
        headline: data.data.headline || '',
        subHeadline: data.data.sub_headline || '',
        description: data.data.description || ''
      };
    }
  } catch (error) {
    handleApiError(error, 'about');
    throw error;
  }
};

export const fetchImageSliderData = async (): Promise<ImageSlideData[]> => {
  const now = Date.now();
  
  // Check if we have valid cached data
  if (imageSliderCache.data && (now - imageSliderCache.timestamp) < CACHE_DURATION) {
    console.log('üì¶ Using cached image slider data');
    return imageSliderCache.data;
  }
  
  // Check if there's an ongoing request
  if (imageSliderCache.promise) {
    console.log('‚è≥ Waiting for ongoing image slider request');
    return imageSliderCache.promise;
  }
  
  // Create new request
  console.log('üîÑ Fetching fresh image slider data');
  imageSliderCache.promise = fetchImageSliderDataInternal();
  
  try {
    const result = await imageSliderCache.promise;
    // Cache the successful result
    imageSliderCache.data = result;
    imageSliderCache.timestamp = now;
    imageSliderCache.promise = null;
    return result;
  } catch (error) {
    // Clear the promise on error
    imageSliderCache.promise = null;
    throw error;
  }
};

const fetchImageSliderDataInternal = async (): Promise<ImageSlideData[]> => {
  try {
    // Fetch projects marked for homepage display
    const homePageProjects = await fetchCategoryProjectForHomePage();
    
    // Process image URLs to handle PUBLIC_URL prefix
    const processedProjects = homePageProjects.map(project => processProjectImageUrls(project));
    
    // Convert to ImageSlideData format
    const imageSliderData: ImageSlideData[] = processedProjects.map(project => ({
      id: project.id,
      projectId: project.projectId,
      imageUrl: project.thumbnailImage,
      title: project.title,
      subtitle: project.clientName,
      size: project.area
    }));
    
    console.log(`Converted ${imageSliderData.length} projects to image slider format`);
    
    return imageSliderData;
  } catch (error) {
    console.error('Error fetching image slider data from projects:', error);
    console.log('Falling back to original mock data for image slider');
    // await delay(400);
    return [
      {
        id: 1,
        imageUrl: thumbIntro1,
        projectId: "NH√Ä ANH TR·∫†CH",
        title: "NH√Ä ANH TR·∫†CH",
        subtitle: "Thi c√¥ng n·ªôi th·∫•t nh√† ph·ªë",
        size: "180m2",
      },
      {
        id: 2,
        imageUrl: thumbIntro2,
        projectId: "ANH M·ª∏ - OPAL GARDEN",
        title: "ANH M·ª∏ - OPAL GARDEN",
        subtitle: "Thi c√¥ng n·ªôi th·∫•t cƒÉn h·ªô",
        size: "180m2",
      },
      {
        id: 3,
        imageUrl: thumbIntro3,
        projectId: "SKY LINKED VILLA",
        title: "SKY LINKED VILLA",
        subtitle: "Thi c√¥ng n·ªôi th·∫•t bi·ªát th·ª±",
        size: "180m2",
      },
      {
        id: 4,
        imageUrl: thumbIntro,
        projectId: "D·ª∞ √ÅN M·ªöI 1",
        title: "D·ª∞ √ÅN M·ªöI 1",
        subtitle: "Thi c√¥ng n·ªôi th·∫•t chung c∆∞",
        size: "120m2",
      },
      {
        id: 5,
        imageUrl: thumbIntro1,
        projectId: "D·ª∞ √ÅN M·ªöI 2",
        title: "D·ª∞ √ÅN M·ªöI 2",
        subtitle: "Thi c√¥ng n·ªôi th·∫•t vƒÉn ph√≤ng",
        size: "300m2",
      },
    ];
  }
};

export const fetchStatsData = async (): Promise<StatsData> => {
  try {
    if (USE_MOCK_DATA) {
      // Use mock data
      // await delay(350);
      return {
        header: {
          mainHeadline: "TH√ÄNH T·ª∞U C·ª¶A CH√öNG T√îI",
          subHeadline: "Nh·ªØng con s·ªë ·∫•n t∆∞·ª£ng",
          description: "V·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c thi·∫øt k·∫ø ki·∫øn tr√∫c v√† n·ªôi th·∫•t, ch√∫ng t√¥i t·ª± h√†o mang ƒë·∫øn nh·ªØng gi·∫£i ph√°p t·ªëi ∆∞u cho m·ªçi kh√¥ng gian s·ªëng."
        },
        items: [
          {
            id: 1,
            icon: BriefcaseIcon,
            targetValue: 5,
            label: "Kinh nghi·ªám",
            suffix: "+",
            description: "NƒÉm kinh nghi·ªám",
            backgroundImage: experienceImg,
            category: "experience"
          },
          {
            id: 2,
            icon: HandshakeIcon,
            targetValue: 500,
            label: "Kh√°ch h√†ng",
            suffix: "+",
            description: "Tin t∆∞·ªüng & h√†i l√≤ng",
            backgroundImage: customerImg,
            category: "customers"
          },
          {
            id: 3,
            icon: DesignIcon,
            targetValue: 450,
            label: "D·ª± √°n",
            suffix: "+",
            description: "Thi·∫øt k·∫ø ho√†n th√†nh",
            backgroundImage: projectImg,
            category: "projects"
          },
          {
            id: 4,
            icon: GearIcon,
            targetValue: 98,
            label: "Ch·∫•t l∆∞·ª£ng",
            suffix: "%",
            description: "Cam k·∫øt ho√†n h·∫£o",
            backgroundImage: qualityImg,
            category: "quality"
          },
        ]
      };
    } else {
      // Make real API call
      const response = await fetch(`${API_BASE_URL}/homepage/stats`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(10000),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      return {
        header: {
          mainHeadline: data.data.header.main_headline || '',
          subHeadline: data.data.header.sub_headline || '',
          description: data.data.header.description || ''
        },
        items: data.data.items.map((item: any) => ({
          id: item.id,
          icon: BriefcaseIcon, // Keep using default icons since backend doesn't provide components
          targetValue: item.targetValue || 0,
          label: item.label || '',
          suffix: item.suffix || '',
          description: item.description || '',
          category: item.category || ''
        }))
      };
    }
  } catch (error) {
    handleApiError(error, 'stats');
    throw error;
  }
};

export const fetchSolutionData = async (): Promise<SolutionData> => {
  try {
    if (USE_MOCK_DATA) {
      // Use mock data
      // await delay(300);
      return {
        header: {
          mainHeadline: "GI·∫¢I PH√ÅP KH√îNG GIAN",
          subHeadline: "D√ÄNH RI√äNG CHO B·∫†N"
        },
        solutions: [
          {
            id: 1,
            imageUrl: solutionImg1,
            category: "D·ªãch v·ª• thi c√¥ng",
            title: ["Ph·∫ßn th√¥", "Tr·ªçn g√≥i ho√†n thi·ªán"],
            link: "/services/architecture-design",
          },
          {
            id: 2,
            imageUrl: solutionImg2,
            category: "D·ªãch v·ª• thi c√¥ng",
            title: ["N·ªôi th·∫•t"],
            link: "/services/interior-design",
          },
          {
            id: 3,
            imageUrl: solutionImg3,
            category: "D·ªãch v·ª• thi·∫øt k·∫ø",
            title: ["Ki·∫øn tr√∫c", "N·ªôi th·∫•t"],
            link: "/services/construction",
          },
          {
            id: 4,
            imageUrl: solutionImg4,
            category: "D·ªãch v·ª• thi c√¥ng",
            title: ["C·∫£i t·∫°o s·ª≠a ch·ªØa", "D·ª± √°n ƒë√£ c√≥ b·∫£n v·∫Ω"],
            link: "/services/full-package",
          },
        ]
      };
    } else {
      // Make real API call
      const response = await fetch(`${API_BASE_URL}/homepage/solution`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(10000),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      return {
        header: {
          mainHeadline: data.data.header.main_headline || '',
          subHeadline: data.data.header.sub_headline || ''
        },
        solutions: data.data.solutions.map((solution: any) => ({
          id: solution.id,
          imageUrl: solution.image_url || '',
          category: solution.category || '',
          title: Array.isArray(solution.title) ? solution.title : [solution.title],
          link: solution.link || ''
        }))
      };
    }
  } catch (error) {
    handleApiError(error, 'solution');
    throw error;
  }
};

export const fetchWorkflowData = async (): Promise<WorkflowData> => {
  try {
    if (USE_MOCK_DATA) {
      // Use mock data
      // await delay(250);
      return {
        title: "QUY TR√åNH L√ÄM VI·ªÜC",
        workflows: [
          {
            id: 'design',
            icon: DesignProcessIcon,
            title: 'QUY TR√åNH THI·∫æT K·∫æ',
            diagram: WorkProcessFlowDiagram1
          },
          {
            id: 'construction',
            icon: ConstructionProcessIcon,
            title: 'QUY TR√åNH THI C√îNG',
            diagram: WorkProcessFlowDiagram2
          }
        ]
      };
    } else {
      // Make real API call
      const response = await fetch(`${API_BASE_URL}/homepage/workflow`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(10000),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      return {
        title: data.data.main.title || '',
        workflows: data.data.tabs.map((tab: any) => ({
          id: tab.workflow_key || '',
          icon: tab.workflow_key === 'design' ? DesignProcessIcon : ConstructionProcessIcon,
          title: tab.title || '',
          diagram: tab.workflow_key === 'design' ? WorkProcessFlowDiagram1 : WorkProcessFlowDiagram2
        }))
      };
    }
  } catch (error) {
    handleApiError(error, 'workflow');
    throw error;
  }
};

export const fetchProjectDiaryData = async (): Promise<ProjectDiaryData> => {
  try {
    if (USE_MOCK_DATA) {
      // Use mock data
      // await delay(200);
      return {
        title: "NH·∫¨T K√ù H√ÄNH TR√åNH",
        images: [
          { src: projectDiary1, alt: "People presenting something at a table" },
          { src: projectDiary2, alt: "People inspecting a room in construction" },
          { src: projectDiary3, alt: "Construction workers reviewing plans" },
          { src: projectDiary4, alt: "Stylish kitchen interior" },
          { src: projectDiary5, alt: "Person using a tablet at a desk" },
          { src: projectDiary6, alt: "Modern living room interior" },
          { src: projectDiary7, alt: "Team standing in front of a house design" },
          { src: projectDiary8, alt: "Worker installing a window" },
        ]
      };
    } else {
      // Make real API call
      const response = await fetch(`${API_BASE_URL}/homepage/project-diary`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(10000),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      return {
        title: data.data.main.title || '',
        images: data.data.images.map((image: any) => ({
          src: image.image_url || '',
          alt: image.image_alt || ''
        }))
      };
    }
  } catch (error) {
    handleApiError(error, 'project diary');
    throw error;
  }
};

export const fetchTestimonialData = async (): Promise<TestimonialData> => {
  try {
    if (USE_MOCK_DATA) {
      // Use mock data
      // await delay(300);
      return {
        header: {
          mainHeadline: "C·∫¢M NH·∫¨N KH√ÅCH H√ÄNG",
          subHeadline: "V·ªÄ PG DESIGN"
        },
        testimonials: [
          {
            name: "CH·ªä NHI",
            project: "CHUNG C∆Ø CITY GATES - Q1",
            text: "T√¥i r·∫•t h√†i l√≤ng v·ªõi D·ªãch v·ª• thi c√¥ng thi·∫øt k·∫ø v√† thi c√¥ng n·ªôi th·∫•t c·ªßa PG Design. M·ªçi th·ª© ƒë·ªÅu ƒë∆∞·ª£c ho√†n thi·ªán ƒë√∫ng ti·∫øn ƒë·ªô, ƒë√∫ng nh∆∞ nh·ªØng g√¨ t√¥i mong ƒë·ª£i - th·∫≠m ch√≠ c√≤n ƒë·∫πp h∆°n c·∫£ b·∫£n v·∫Ω 3D. Nh√¢n s·ª± t∆∞ v·∫•n k·ªπ l∆∞·ª°ng, th√¢n thi·ªán v√† lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫•t c·ª© khi n√†o t√¥i c·∫ßn.",
          },
          {
            name: "ANH B√åNH",
            project: "CHUNG C∆Ø CITY GATES - Q1",
            text: "ƒêi·ªÅu t√¥i ·∫•n t∆∞·ª£ng nh·∫•t ·ªü PG Design l√† s·ª± chuy√™n nghi·ªáp v√† tinh t·∫ø trong t·ª´ng chi ti·∫øt. Kh√¥ng gian s·ªëng sau khi ho√†n thi·ªán v·ª´a hi·ªán ƒë·∫°i, v·ª´a mang t√≠nh c√° nh√¢n h√≥a cao. Gia ƒë√¨nh t√¥i c·∫£m th·∫•y tho·∫£i m√°i v√† h√†i l√≤ng m·ªói ng√†y khi tr·ªü v·ªÅ nh√†.",
          },
          {
            name: "CH·ªä LAN",
            project: "D·ª∞ √ÅN BI·ªÜT TH·ª∞ ƒê√Ä L·∫†T - Q1",
            text: "Bi·ªát th·ª± c·ªßa t√¥i ·ªü ƒê√† L·∫°t c√≥ nhi·ªÅu g√≥c kh√≥ x·ª≠ l√Ω, nh∆∞ng PG Design ƒë√£ ƒë∆∞a ra nh·ªØng gi·∫£i ph√°p r·∫•t th√¥ng minh v√† th·∫©m m·ªπ. Thi·∫øt k·∫ø v·ª´a sang tr·ªçng, v·ª´a g·∫ßn g≈©i v·ªõi thi√™n nhi√™n ‚Äì ƒë√∫ng nh∆∞ mong mu·ªën ban ƒë·∫ßu. T√¥i ƒë√°nh gi√° cao s·ª± t·∫≠n t√¢m v√† gu th·∫©m m·ªπ c·ªßa ƒë·ªôi ng≈©.",
          },
          {
            name: "ANH TH·ªäNH",
            project: "NH√Ä PH·ªê QU·∫¨N 7 - Q1",
            text: "PG Design ƒë√£ bi·∫øn ng√¥i nh√† ph·ªë c·ªßa t√¥i th√†nh m·ªôt kh√¥ng gian s·ªëng ho√†n h·∫£o. T·ª´ thi·∫øt k·∫ø ban ƒë·∫ßu ƒë·∫øn thi c√¥ng ho√†n thi·ªán, m·ªçi b∆∞·ªõc ƒë·ªÅu ƒë∆∞·ª£c th·ª±c hi·ªán m·ªôt c√°ch chuy√™n nghi·ªáp. ƒê·∫∑c bi·ªát l√† ph·∫ßn b·∫øp v√† ph√≤ng kh√°ch, v·ª´a ƒë·∫πp v·ª´a ti·ªán d·ª•ng cho gia ƒë√¨nh.",
          },
          {
            name: "CH·ªä MAI",
            project: "CƒÇN H·ªò CAO C·∫§P - Q8",
            text: "L√†m vi·ªác v·ªõi PG Design l√† m·ªôt tr·∫£i nghi·ªám tuy·ªát v·ªùi. H·ªç kh√¥ng ch·ªâ t·∫°o ra kh√¥ng gian ƒë·∫πp m√† c√≤n hi·ªÉu r√µ nhu c·∫ßu s·ª≠ d·ª•ng c·ªßa gia ƒë√¨nh. CƒÉn h·ªô sau khi ho√†n thi·ªán v·ª´a hi·ªán ƒë·∫°i, v·ª´a ·∫•m c√∫ng. T√¥i r·∫•t h√†i l√≤ng v·ªõi k·∫øt qu·∫£ cu·ªëi c√πng.",
          },
          {
            name: "ANH TU·∫§N",
            project: "SHOPHOUSE QU·∫¨N 2",
            text: "D·ª± √°n shophouse c·ªßa t√¥i ƒë∆∞·ª£c PG Design thi·∫øt k·∫ø r·∫•t th√¥ng minh, t·ªëi ∆∞u kh√¥ng gian kinh doanh v√† sinh ho·∫°t. ƒê·ªôi ng≈© thi c√¥ng chuy√™n nghi·ªáp, ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng v√† ti·∫øn ƒë·ªô. T√¥i ƒë√°nh gi√° cao s·ª± t·∫≠n t√¢m v√† tr√°ch nhi·ªám c·ªßa h·ªç.",
          },
          {
            name: "CH·ªä H∆Ø∆†NG",
            project: "VƒÇN PH√íNG QU·∫¨N 3",
            text: "VƒÉn ph√≤ng c√¥ng ty t√¥i ƒë∆∞·ª£c PG Design thi·∫øt k·∫ø theo phong c√°ch hi·ªán ƒë·∫°i, t·∫°o m√¥i tr∆∞·ªùng l√†m vi·ªác chuy√™n nghi·ªáp v√† tho·∫£i m√°i. Nh√¢n vi√™n ai c≈©ng th√≠ch kh√¥ng gian m·ªõi n√†y. C·∫£m ∆°n PG Design ƒë√£ mang l·∫°i gi√° tr·ªã th·ª±c s·ª± cho doanh nghi·ªáp.",
          },
          {
            name: "ANH MINH",
            project: "CƒÇN H·ªò STUDIO - Q4",
            text: "CƒÉn h·ªô studio nh·ªè c·ªßa t√¥i ƒë∆∞·ª£c PG Design t·ªëi ∆∞u h√≥a kh√¥ng gian m·ªôt c√°ch tuy·ªát v·ªùi. M·ªçi g√≥c ƒë·ªÅu ƒë∆∞·ª£c s·ª≠ d·ª•ng hi·ªáu qu·∫£, t·∫°o c·∫£m gi√°c r·ªông r√£i h∆°n th·ª±c t·∫ø. Thi·∫øt k·∫ø v·ª´a ƒë·∫πp v·ª´a th·ª±c d·ª•ng, ph√π h·ª£p v·ªõi l·ªëi s·ªëng hi·ªán ƒë·∫°i.",
          },
        ]
      };
    } else {
      // Make real API call
      const response = await fetch(`${API_BASE_URL}/homepage/testimonials`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(10000),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      return {
        header: {
          mainHeadline: data.data.header.main_headline || '',
          subHeadline: data.data.header.sub_headline || ''
        },
        testimonials: data.data.testimonials.map((testimonial: any) => ({
          name: testimonial.name || '',
          project: testimonial.project || '',
          text: testimonial.text || ''
        }))
      };
    }
  } catch (error) {
    handleApiError(error, 'testimonials');
    throw error;
  }
};

export const fetchConsultationFormData = async (): Promise<ConsultationFormData> => {
  try {
    if (USE_MOCK_DATA) {
      // Use mock data
      // await delay(150);
      return {
        title: "ƒêƒÇNG K√ù T∆Ø V·∫§N",
        projectTypes: [
          "-- Ch·ªçn lo·∫°i c√¥ng tr√¨nh --",
          "Nh√† Ph·ªë - CƒÉn h·ªô",
          "Nh√† h√†ng - Kh√°ch s·∫°n",
          "Qu√°n Cafe",
          "VƒÉn ph√≤ng",
          "Bi·ªát th·ª±",
          "Shophouse",
        ],
        minInvestment: 100,
        maxInvestment: 10000,
        stepInvestment: 100
      };
    } else {
      // Make real API call
      const response = await fetch(`${API_BASE_URL}/homepage/consultation-form`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(10000),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      return {
        title: data.data.main.title || '',
        projectTypes: data.data.projectTypes.map((type: any) => type.name || ''),
        minInvestment: data.data.main.min_investment || 100,
        maxInvestment: data.data.main.max_investment || 10000,
        stepInvestment: data.data.main.step_investment || 100
      };
    }
  } catch (error) {
    handleApiError(error, 'consultation form');
    throw error;
  }
};

// Main function to fetch all homepage data
export const fetchHomePageData = async (): Promise<HomePageData> => {
  try {
    if (USE_MOCK_DATA) {
      // Use mock data - fetch all data in parallel for better performance
      const [
        hero,
        about,
        imageSlider,
        stats,
        solution,
        workflow,
        projectDiary,
        testimonials,
        consultationForm
      ] = await Promise.all([
        fetchHeroData(),
        fetchAboutData(),
        fetchImageSliderData(),
        fetchStatsData(),
        fetchSolutionData(),
        fetchWorkflowData(),
        fetchProjectDiaryData(),
        fetchTestimonialData(),
        fetchConsultationFormData()
      ]);

      return {
        hero,
        about,
        imageSlider,
        stats,
        solution,
        workflow,
        projectDiary,
        testimonials,
        consultationForm
      };
    } else {
      // Make real API call to get all data at once
      const response = await fetch(`${API_BASE_URL}/homepage`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(10000),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      const apiData = data.data;
      
      return {
        hero: {
          images: apiData.hero.images || []
        },
        about: {
          headline: apiData.about.headline || '',
          subHeadline: apiData.about.sub_headline || '',
          description: apiData.about.description || ''
        },
        imageSlider: apiData.imageSlider.map((slide: any) => ({
          id: slide.id,
          imageUrl: slide.image_url || '',
          title: slide.title || '',
          subtitle: slide.subtitle || '',
          size: slide.size || ''
        })),
        stats: {
          header: {
            mainHeadline: apiData.stats.header.main_headline || '',
            subHeadline: apiData.stats.header.sub_headline || '',
            description: apiData.stats.header.description || ''
          },
          items: apiData.stats.items.map((item: any) => ({
            id: item.id,
            icon: BriefcaseIcon,
            targetValue: item.targetValue || 0,
            label: item.label || '',
            suffix: item.suffix || '',
            description: item.description || '',
            category: item.category || ''
          }))
        },
        solution: {
          header: {
            mainHeadline: apiData.solution.header.main_headline || '',
            subHeadline: apiData.solution.header.sub_headline || ''
          },
          solutions: apiData.solution.solutions.map((solution: any) => ({
            id: solution.id,
            imageUrl: solution.image_url || '',
            category: solution.category || '',
            title: Array.isArray(solution.title) ? solution.title : [solution.title],
            link: solution.link || ''
          }))
        },
        workflow: {
          title: apiData.workflow.main.title || '',
          workflows: apiData.workflow.tabs.map((tab: any) => ({
            id: tab.workflow_key || '',
            icon: tab.workflow_key === 'design' ? DesignProcessIcon : ConstructionProcessIcon,
            title: tab.title || '',
            diagram: tab.workflow_key === 'design' ? WorkProcessFlowDiagram1 : WorkProcessFlowDiagram2
          }))
        },
        projectDiary: {
          title: apiData.projectDiary.main.title || '',
          images: apiData.projectDiary.images.map((image: any) => ({
            src: image.image_url || '',
            alt: image.image_alt || ''
          }))
        },
        testimonials: {
          header: {
            mainHeadline: apiData.testimonials.header.main_headline || '',
            subHeadline: apiData.testimonials.header.sub_headline || ''
          },
          testimonials: apiData.testimonials.testimonials.map((testimonial: any) => ({
            name: testimonial.name || '',
            project: testimonial.project || '',
            text: testimonial.text || ''
          }))
        },
        consultationForm: {
          title: apiData.consultationForm.main.title || '',
          projectTypes: apiData.consultationForm.projectTypes.map((type: any) => type.name || ''),
          minInvestment: apiData.consultationForm.main.min_investment || 100,
          maxInvestment: apiData.consultationForm.main.max_investment || 10000,
          stepInvestment: apiData.consultationForm.main.step_investment || 100
        }
      };
    }
  } catch (error) {
    handleApiError(error, 'homepage');
    throw error;
  }
};

// Utility function to check API health
export const checkApiHealth = async (): Promise<boolean> => {
  try {
    if (USE_MOCK_DATA) {
      // Mock health check
      // await delay(100);
      return true;
    } else {
      // Real API health check
      const response = await fetch(`${API_BASE_URL}/health`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(10000),
      });
      return response.ok;
    }
  } catch (error) {
    console.error('API health check failed:', error);
    return false;
  }
};

/**
 * Clear the image slider cache to force a fresh fetch
 * Useful when you need to refresh the data
 */
export const clearImageSliderCache = (): void => {
  console.log('üóëÔ∏è Clearing image slider cache');
  imageSliderCache = {
    data: null,
    timestamp: 0,
    promise: null
  };
}; 